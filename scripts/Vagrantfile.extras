hostname = %x[ hostname ]
username = %x[ whoami ]

# You might want to replace this with a literal project name.
project  = File.basename(File.dirname(__FILE__));

# Compute IP address and forwarded ports based on the project name.
#
# The IP address is in the 10.0.0.0/8 private subnet, with the last three
# digits determined by the lowest 24 bits of the CRC.
#
# The forwarded ports are numbered starting at 3000. The least significant two
# digits identify the service; the others are computed based on the modulus of
# the CRC. For example, 'myproject' will have its port forwardings in the range
# 10800-10899.
#
# The hope is that these calculations will reduce the possibility of port and
# subnet collisions so that many projects can run simultaneously on the same
# machine without requiring manual changes to the Vagrantfile.
#
require 'zlib'
require 'ipaddr'
crc = Zlib::crc32(project)
ip = (crc & 0x00ffffff) | (10 << 24)
ip = IPAddr.new(ip, Socket::AF_INET).to_s
$port_base = (crc % 500) * 100 + 3000

# Colorize custom output
class String
  # Normal colors
  def black;       colorize(self, "\e[0m\e[30");     end
  def red;         colorize(self, "\e[0m\e[31");     end
  def green;       colorize(self, "\e[0m\e[32");     end
  def yellow;      colorize(self, "\e[0m\e[33");     end
  def blue;        colorize(self, "\e[0m\e[34");     end
  def purple;      colorize(self, "\e[0m\e[35");     end
  def cyan;        colorize(self, "\e[0m\e[36");     end
  def white;       colorize(self, "\e[0m\e[37");     end

  # Fun stuff
  def clean;       colorize(self, "\e[0");           end
  def bold;        colorize(self, "\e[1");           end
  def underline;   colorize(self, "\e[4");           end
  def blink;       colorize(self, "\e[5");           end
  def conceal;     colorize(self, "\e[8");           end

  # Blanking
  def clear_scr;   colorize(self, "\e[2", mode="J"); end

  # Placement
  def place(line, column)
    colorize(self, "\e[#{line};#{column}", mode='f')
  end

  def save_pos;    colorize(self, "\e[", mode='s');  end
  def return_pos;  colorize(self, "\e[", mode='u');  end

  def colorize(text, color_code, mode='m')
    "#{color_code}#{mode}#{text}\e[0m"
  end

end

# vim: set ft=ruby
